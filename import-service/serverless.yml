service: import-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    SQS_URL:
      Ref: SQSQueue

  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::aws-nodejs-uploaded"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::aws-nodejs-uploaded/*"
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: aws-nodejs-product-import-queue
    GatewayResponseDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: ApiGatewayRestApi
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
  Outputs:
    SQSQueueArn:
      Value:
        Fn::GetAtt:
          - SQSQueue
          - Arn
      Export:
        Name: SQSQueueArn

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            arn: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:authorization-service-dev-authorizer"
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: aws-nodejs-uploaded
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true

