service: product-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    PG_HOST: process.env.PG_HOST
    PG_PORT: process.env.PG_PORT
    PG_DATABASE: process.env.PG_DATABASE
    PG_USERNAME: process.env.PG_USERNAME
    PG_PASSWORD: process.env.PG_PASSWORD

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  documentation:
    api:
      info:
        version: '2'
        title: Product service API
        description: Product service API
        termsOfService: https://github.com/agarmashevska
        contact:
          name: anniege
          url: https://github.com/agarmashevska
          email: agarmashevska@gmail.com
        license:
          name: license
          url: https://www.github.com
      tags:
        -
          name: getProductsListTag
          description: getProductsList function tag
        -
          name: getProductByIdTag
          description: getProductById function tag
    models:
      -
        name: Product
        description: "Product model"
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            description:
              type: string
            price:
              type: number
            count:
              type: number
      -
        name: ProductsResponse
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: "{{model: Product}}"
      -
        name: CreateProductResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
      -
        name: productRequest
        contentType: "application/json"
        schema:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            price:
              type: number
            count:
              type: number
      -
        name: ProductResponse
        contentType: "application/json"
        schema:
          $ref: "{{model: Product}}"
      -
        name: 404JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
      -
        name: 400JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
      -
        name: 500JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
    commonModelSchemaFragments:
      MethodResponse400Json:
        statusCode: '400'
        responseModels:
          "application/json": 400JsonResponse
      MethodResponse404Json:
        statusCode: '404'
        responseModels:
          "application/json": 404JsonResponse
      MethodResponse500Json:
        statusCode: '500'
        responseModels:
          "application/json": 500JsonResponse

functions:
  getAllProducts:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation:
            summary: Gets all products
            tags:
              - getProductsListTag
            description: >
              You can get all products.
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": ProductsResponse
              - ${self:custom.documentation.commonModelSchemaFragments.MethodResponse404Json}
              - ${self:custom.documentation.commonModelSchemaFragments.MethodResponse500Json}
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
          documentation:
            summary: Get product by id
            tags:
              - getProductByIdTag
            description: You can get product by providing id as path param.
            pathParams:
              -
                name: productId
                description: product id
                required: true
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": ProductResponse
              - ${self:custom.documentation.commonModelSchemaFragments.MethodResponse404Json}
              - ${self:custom.documentation.commonModelSchemaFragments.MethodResponse500Json}
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          documentation:
            summary: Create product
            tags:
              - createProduct
            description: You can create product.
            consumes:
              - application/json
            requestModels:
              "application/json": productRequest
            methodResponses:
              - statusCode: '201'
                responseModels:
                  "application/json": CreateProductResponse
              - ${self:custom.documentation.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.documentation.commonModelSchemaFragments.MethodResponse500Json}
